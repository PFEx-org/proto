# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import common_pb2 as common__pb2
import user_pb2 as user__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in user_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class UserServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReadUsers = channel.unary_unary(
                '/user.UserService/ReadUsers',
                request_serializer=user__pb2.ReadUsersRequest.SerializeToString,
                response_deserializer=user__pb2.UsersPublic.FromString,
                _registered_method=True)
        self.ReadUserById = channel.unary_unary(
                '/user.UserService/ReadUserById',
                request_serializer=user__pb2.UserRequest.SerializeToString,
                response_deserializer=user__pb2.UserPublic.FromString,
                _registered_method=True)
        self.ReadAllUsers = channel.unary_unary(
                '/user.UserService/ReadAllUsers',
                request_serializer=common__pb2.Empty.SerializeToString,
                response_deserializer=user__pb2.UsersPublic.FromString,
                _registered_method=True)
        self.GetUserFeeGroup = channel.unary_unary(
                '/user.UserService/GetUserFeeGroup',
                request_serializer=user__pb2.UserRequest.SerializeToString,
                response_deserializer=user__pb2.UserFeeGroup.FromString,
                _registered_method=True)
        self.GetUserMarginGroup = channel.unary_unary(
                '/user.UserService/GetUserMarginGroup',
                request_serializer=user__pb2.UserRequest.SerializeToString,
                response_deserializer=user__pb2.UserMarginGroup.FromString,
                _registered_method=True)
        self.RegisterUser = channel.unary_unary(
                '/user.UserService/RegisterUser',
                request_serializer=user__pb2.CreateUserRequest.SerializeToString,
                response_deserializer=user__pb2.UserPublic.FromString,
                _registered_method=True)
        self.ReadUserByIdPrivate = channel.unary_unary(
                '/user.UserService/ReadUserByIdPrivate',
                request_serializer=user__pb2.UserRequest.SerializeToString,
                response_deserializer=user__pb2.UserPrivate.FromString,
                _registered_method=True)
        self.ReadUserByEmailPrivate = channel.unary_unary(
                '/user.UserService/ReadUserByEmailPrivate',
                request_serializer=user__pb2.UserEmailRequest.SerializeToString,
                response_deserializer=user__pb2.UserPrivate.FromString,
                _registered_method=True)


class UserServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ReadUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadUserById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadAllUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserFeeGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserMarginGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadUserByIdPrivate(self, request, context):
        """SHOULD ONLY BE POSSIBLE BY REST API AND FROM LOCAL NETWORK
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadUserByEmailPrivate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReadUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadUsers,
                    request_deserializer=user__pb2.ReadUsersRequest.FromString,
                    response_serializer=user__pb2.UsersPublic.SerializeToString,
            ),
            'ReadUserById': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadUserById,
                    request_deserializer=user__pb2.UserRequest.FromString,
                    response_serializer=user__pb2.UserPublic.SerializeToString,
            ),
            'ReadAllUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadAllUsers,
                    request_deserializer=common__pb2.Empty.FromString,
                    response_serializer=user__pb2.UsersPublic.SerializeToString,
            ),
            'GetUserFeeGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserFeeGroup,
                    request_deserializer=user__pb2.UserRequest.FromString,
                    response_serializer=user__pb2.UserFeeGroup.SerializeToString,
            ),
            'GetUserMarginGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserMarginGroup,
                    request_deserializer=user__pb2.UserRequest.FromString,
                    response_serializer=user__pb2.UserMarginGroup.SerializeToString,
            ),
            'RegisterUser': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterUser,
                    request_deserializer=user__pb2.CreateUserRequest.FromString,
                    response_serializer=user__pb2.UserPublic.SerializeToString,
            ),
            'ReadUserByIdPrivate': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadUserByIdPrivate,
                    request_deserializer=user__pb2.UserRequest.FromString,
                    response_serializer=user__pb2.UserPrivate.SerializeToString,
            ),
            'ReadUserByEmailPrivate': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadUserByEmailPrivate,
                    request_deserializer=user__pb2.UserEmailRequest.FromString,
                    response_serializer=user__pb2.UserPrivate.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'user.UserService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('user.UserService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class UserService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ReadUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/user.UserService/ReadUsers',
            user__pb2.ReadUsersRequest.SerializeToString,
            user__pb2.UsersPublic.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadUserById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/user.UserService/ReadUserById',
            user__pb2.UserRequest.SerializeToString,
            user__pb2.UserPublic.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadAllUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/user.UserService/ReadAllUsers',
            common__pb2.Empty.SerializeToString,
            user__pb2.UsersPublic.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserFeeGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/user.UserService/GetUserFeeGroup',
            user__pb2.UserRequest.SerializeToString,
            user__pb2.UserFeeGroup.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserMarginGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/user.UserService/GetUserMarginGroup',
            user__pb2.UserRequest.SerializeToString,
            user__pb2.UserMarginGroup.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/user.UserService/RegisterUser',
            user__pb2.CreateUserRequest.SerializeToString,
            user__pb2.UserPublic.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadUserByIdPrivate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/user.UserService/ReadUserByIdPrivate',
            user__pb2.UserRequest.SerializeToString,
            user__pb2.UserPrivate.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReadUserByEmailPrivate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/user.UserService/ReadUserByEmailPrivate',
            user__pb2.UserEmailRequest.SerializeToString,
            user__pb2.UserPrivate.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class TradeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddTrade = channel.unary_unary(
                '/user.TradeService/AddTrade',
                request_serializer=user__pb2.AddTradeRequest.SerializeToString,
                response_deserializer=user__pb2.TradePublic.FromString,
                _registered_method=True)
        self.GetTrade = channel.unary_unary(
                '/user.TradeService/GetTrade',
                request_serializer=common__pb2.ListRequest.SerializeToString,
                response_deserializer=user__pb2.TradePublic.FromString,
                _registered_method=True)
        self.GetTrades = channel.unary_unary(
                '/user.TradeService/GetTrades',
                request_serializer=common__pb2.ListRequest.SerializeToString,
                response_deserializer=common__pb2.TradesPublic.FromString,
                _registered_method=True)
        self.GetUserTrades = channel.unary_unary(
                '/user.TradeService/GetUserTrades',
                request_serializer=user__pb2.GetUserLimitRequest.SerializeToString,
                response_deserializer=common__pb2.TradesPublic.FromString,
                _registered_method=True)
        self.GetMostRecentTradeSlow = channel.unary_unary(
                '/user.TradeService/GetMostRecentTradeSlow',
                request_serializer=common__pb2.Empty.SerializeToString,
                response_deserializer=user__pb2.AppendTradeRequest.FromString,
                _registered_method=True)


class TradeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddTrade(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTrade(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTrades(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserTrades(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMostRecentTradeSlow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TradeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddTrade': grpc.unary_unary_rpc_method_handler(
                    servicer.AddTrade,
                    request_deserializer=user__pb2.AddTradeRequest.FromString,
                    response_serializer=user__pb2.TradePublic.SerializeToString,
            ),
            'GetTrade': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTrade,
                    request_deserializer=common__pb2.ListRequest.FromString,
                    response_serializer=user__pb2.TradePublic.SerializeToString,
            ),
            'GetTrades': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTrades,
                    request_deserializer=common__pb2.ListRequest.FromString,
                    response_serializer=common__pb2.TradesPublic.SerializeToString,
            ),
            'GetUserTrades': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserTrades,
                    request_deserializer=user__pb2.GetUserLimitRequest.FromString,
                    response_serializer=common__pb2.TradesPublic.SerializeToString,
            ),
            'GetMostRecentTradeSlow': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMostRecentTradeSlow,
                    request_deserializer=common__pb2.Empty.FromString,
                    response_serializer=user__pb2.AppendTradeRequest.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'user.TradeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('user.TradeService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TradeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddTrade(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/user.TradeService/AddTrade',
            user__pb2.AddTradeRequest.SerializeToString,
            user__pb2.TradePublic.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTrade(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/user.TradeService/GetTrade',
            common__pb2.ListRequest.SerializeToString,
            user__pb2.TradePublic.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTrades(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/user.TradeService/GetTrades',
            common__pb2.ListRequest.SerializeToString,
            common__pb2.TradesPublic.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserTrades(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/user.TradeService/GetUserTrades',
            user__pb2.GetUserLimitRequest.SerializeToString,
            common__pb2.TradesPublic.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMostRecentTradeSlow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/user.TradeService/GetMostRecentTradeSlow',
            common__pb2.Empty.SerializeToString,
            user__pb2.AppendTradeRequest.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class BalanceServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetBalances = channel.unary_unary(
                '/user.BalanceService/GetBalances',
                request_serializer=user__pb2.ReadBalancesRequest.SerializeToString,
                response_deserializer=user__pb2.BalancesPublic.FromString,
                _registered_method=True)
        self.GetBalance = channel.unary_unary(
                '/user.BalanceService/GetBalance',
                request_serializer=common__pb2.UserRequest.SerializeToString,
                response_deserializer=common__pb2.BalancePublic.FromString,
                _registered_method=True)
        self.GetBalanceSlow = channel.unary_unary(
                '/user.BalanceService/GetBalanceSlow',
                request_serializer=common__pb2.UserRequest.SerializeToString,
                response_deserializer=common__pb2.BalancePublic.FromString,
                _registered_method=True)
        self.GetAllBalances = channel.unary_stream(
                '/user.BalanceService/GetAllBalances',
                request_serializer=common__pb2.Empty.SerializeToString,
                response_deserializer=common__pb2.BalancePublic.FromString,
                _registered_method=True)
        self.UpdateBalance = channel.unary_unary(
                '/user.BalanceService/UpdateBalance',
                request_serializer=user__pb2.UpdateBalanceRequest.SerializeToString,
                response_deserializer=common__pb2.BalancePublic.FromString,
                _registered_method=True)
        self.DepositBalance = channel.unary_unary(
                '/user.BalanceService/DepositBalance',
                request_serializer=user__pb2.DepositRequest.SerializeToString,
                response_deserializer=common__pb2.BalancePublic.FromString,
                _registered_method=True)


class BalanceServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetBalances(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBalance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBalanceSlow(self, request, context):
        """This calls the DB to get the balance instead of the cache
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllBalances(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateBalance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DepositBalance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BalanceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetBalances': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBalances,
                    request_deserializer=user__pb2.ReadBalancesRequest.FromString,
                    response_serializer=user__pb2.BalancesPublic.SerializeToString,
            ),
            'GetBalance': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBalance,
                    request_deserializer=common__pb2.UserRequest.FromString,
                    response_serializer=common__pb2.BalancePublic.SerializeToString,
            ),
            'GetBalanceSlow': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBalanceSlow,
                    request_deserializer=common__pb2.UserRequest.FromString,
                    response_serializer=common__pb2.BalancePublic.SerializeToString,
            ),
            'GetAllBalances': grpc.unary_stream_rpc_method_handler(
                    servicer.GetAllBalances,
                    request_deserializer=common__pb2.Empty.FromString,
                    response_serializer=common__pb2.BalancePublic.SerializeToString,
            ),
            'UpdateBalance': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateBalance,
                    request_deserializer=user__pb2.UpdateBalanceRequest.FromString,
                    response_serializer=common__pb2.BalancePublic.SerializeToString,
            ),
            'DepositBalance': grpc.unary_unary_rpc_method_handler(
                    servicer.DepositBalance,
                    request_deserializer=user__pb2.DepositRequest.FromString,
                    response_serializer=common__pb2.BalancePublic.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'user.BalanceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('user.BalanceService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class BalanceService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetBalances(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/user.BalanceService/GetBalances',
            user__pb2.ReadBalancesRequest.SerializeToString,
            user__pb2.BalancesPublic.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/user.BalanceService/GetBalance',
            common__pb2.UserRequest.SerializeToString,
            common__pb2.BalancePublic.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBalanceSlow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/user.BalanceService/GetBalanceSlow',
            common__pb2.UserRequest.SerializeToString,
            common__pb2.BalancePublic.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllBalances(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/user.BalanceService/GetAllBalances',
            common__pb2.Empty.SerializeToString,
            common__pb2.BalancePublic.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/user.BalanceService/UpdateBalance',
            user__pb2.UpdateBalanceRequest.SerializeToString,
            common__pb2.BalancePublic.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DepositBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/user.BalanceService/DepositBalance',
            user__pb2.DepositRequest.SerializeToString,
            common__pb2.BalancePublic.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class OrderServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetMostRecentOrderSlow = channel.unary_unary(
                '/user.OrderService/GetMostRecentOrderSlow',
                request_serializer=common__pb2.Empty.SerializeToString,
                response_deserializer=common__pb2.AppendOrderRequest.FromString,
                _registered_method=True)
        self.GetUserOrders = channel.unary_unary(
                '/user.OrderService/GetUserOrders',
                request_serializer=user__pb2.GetUserLimitRequest.SerializeToString,
                response_deserializer=user__pb2.OrdersPublic.FromString,
                _registered_method=True)


class OrderServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetMostRecentOrderSlow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserOrders(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrderServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetMostRecentOrderSlow': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMostRecentOrderSlow,
                    request_deserializer=common__pb2.Empty.FromString,
                    response_serializer=common__pb2.AppendOrderRequest.SerializeToString,
            ),
            'GetUserOrders': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserOrders,
                    request_deserializer=user__pb2.GetUserLimitRequest.FromString,
                    response_serializer=user__pb2.OrdersPublic.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'user.OrderService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('user.OrderService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class OrderService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetMostRecentOrderSlow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/user.OrderService/GetMostRecentOrderSlow',
            common__pb2.Empty.SerializeToString,
            common__pb2.AppendOrderRequest.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserOrders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/user.OrderService/GetUserOrders',
            user__pb2.GetUserLimitRequest.SerializeToString,
            user__pb2.OrdersPublic.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class MarginServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CheckMargin = channel.unary_unary(
                '/user.MarginService/CheckMargin',
                request_serializer=user__pb2.CheckMarginRequest.SerializeToString,
                response_deserializer=user__pb2.CheckMarginResponse.FromString,
                _registered_method=True)
        self.GetAvailableLeverageLevels = channel.unary_unary(
                '/user.MarginService/GetAvailableLeverageLevels',
                request_serializer=common__pb2.UserRequest.SerializeToString,
                response_deserializer=user__pb2.LeveragesPublic.FromString,
                _registered_method=True)
        self.GetUserLeverage = channel.unary_unary(
                '/user.MarginService/GetUserLeverage',
                request_serializer=common__pb2.UserRequest.SerializeToString,
                response_deserializer=user__pb2.LeveragesPublic.FromString,
                _registered_method=True)
        self.SetUserLeverage = channel.unary_unary(
                '/user.MarginService/SetUserLeverage',
                request_serializer=user__pb2.SetLeverageRequest.SerializeToString,
                response_deserializer=common__pb2.AckResponse.FromString,
                _registered_method=True)


class MarginServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CheckMargin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAvailableLeverageLevels(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserLeverage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetUserLeverage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MarginServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CheckMargin': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckMargin,
                    request_deserializer=user__pb2.CheckMarginRequest.FromString,
                    response_serializer=user__pb2.CheckMarginResponse.SerializeToString,
            ),
            'GetAvailableLeverageLevels': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAvailableLeverageLevels,
                    request_deserializer=common__pb2.UserRequest.FromString,
                    response_serializer=user__pb2.LeveragesPublic.SerializeToString,
            ),
            'GetUserLeverage': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserLeverage,
                    request_deserializer=common__pb2.UserRequest.FromString,
                    response_serializer=user__pb2.LeveragesPublic.SerializeToString,
            ),
            'SetUserLeverage': grpc.unary_unary_rpc_method_handler(
                    servicer.SetUserLeverage,
                    request_deserializer=user__pb2.SetLeverageRequest.FromString,
                    response_serializer=common__pb2.AckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'user.MarginService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('user.MarginService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MarginService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CheckMargin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/user.MarginService/CheckMargin',
            user__pb2.CheckMarginRequest.SerializeToString,
            user__pb2.CheckMarginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAvailableLeverageLevels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/user.MarginService/GetAvailableLeverageLevels',
            common__pb2.UserRequest.SerializeToString,
            user__pb2.LeveragesPublic.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserLeverage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/user.MarginService/GetUserLeverage',
            common__pb2.UserRequest.SerializeToString,
            user__pb2.LeveragesPublic.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetUserLeverage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/user.MarginService/SetUserLeverage',
            user__pb2.SetLeverageRequest.SerializeToString,
            common__pb2.AckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ManageServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReloadFees = channel.unary_unary(
                '/user.ManageService/ReloadFees',
                request_serializer=common__pb2.Empty.SerializeToString,
                response_deserializer=common__pb2.AckResponse.FromString,
                _registered_method=True)
        self.ReloadMargin = channel.unary_unary(
                '/user.ManageService/ReloadMargin',
                request_serializer=common__pb2.Empty.SerializeToString,
                response_deserializer=common__pb2.AckResponse.FromString,
                _registered_method=True)
        self.FlushFastBalances = channel.unary_unary(
                '/user.ManageService/FlushFastBalances',
                request_serializer=common__pb2.Empty.SerializeToString,
                response_deserializer=common__pb2.AckResponse.FromString,
                _registered_method=True)
        self.FlushFastPositions = channel.unary_unary(
                '/user.ManageService/FlushFastPositions',
                request_serializer=common__pb2.Empty.SerializeToString,
                response_deserializer=common__pb2.AckResponse.FromString,
                _registered_method=True)


class ManageServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ReloadFees(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReloadMargin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FlushFastBalances(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FlushFastPositions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ManageServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReloadFees': grpc.unary_unary_rpc_method_handler(
                    servicer.ReloadFees,
                    request_deserializer=common__pb2.Empty.FromString,
                    response_serializer=common__pb2.AckResponse.SerializeToString,
            ),
            'ReloadMargin': grpc.unary_unary_rpc_method_handler(
                    servicer.ReloadMargin,
                    request_deserializer=common__pb2.Empty.FromString,
                    response_serializer=common__pb2.AckResponse.SerializeToString,
            ),
            'FlushFastBalances': grpc.unary_unary_rpc_method_handler(
                    servicer.FlushFastBalances,
                    request_deserializer=common__pb2.Empty.FromString,
                    response_serializer=common__pb2.AckResponse.SerializeToString,
            ),
            'FlushFastPositions': grpc.unary_unary_rpc_method_handler(
                    servicer.FlushFastPositions,
                    request_deserializer=common__pb2.Empty.FromString,
                    response_serializer=common__pb2.AckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'user.ManageService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('user.ManageService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ManageService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ReloadFees(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/user.ManageService/ReloadFees',
            common__pb2.Empty.SerializeToString,
            common__pb2.AckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReloadMargin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/user.ManageService/ReloadMargin',
            common__pb2.Empty.SerializeToString,
            common__pb2.AckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FlushFastBalances(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/user.ManageService/FlushFastBalances',
            common__pb2.Empty.SerializeToString,
            common__pb2.AckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FlushFastPositions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/user.ManageService/FlushFastPositions',
            common__pb2.Empty.SerializeToString,
            common__pb2.AckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class PositionServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetPosition = channel.unary_unary(
                '/user.PositionService/GetPosition',
                request_serializer=user__pb2.PositionRequest.SerializeToString,
                response_deserializer=user__pb2.PositionPublic.FromString,
                _registered_method=True)
        self.GetUserPositions = channel.unary_unary(
                '/user.PositionService/GetUserPositions',
                request_serializer=common__pb2.UserRequest.SerializeToString,
                response_deserializer=user__pb2.PositionsPublic.FromString,
                _registered_method=True)
        self.GetPositionSlow = channel.unary_unary(
                '/user.PositionService/GetPositionSlow',
                request_serializer=user__pb2.PositionRequest.SerializeToString,
                response_deserializer=user__pb2.PositionPublic.FromString,
                _registered_method=True)
        self.CreatePosition = channel.unary_unary(
                '/user.PositionService/CreatePosition',
                request_serializer=user__pb2.PositionRequest.SerializeToString,
                response_deserializer=user__pb2.PositionPublic.FromString,
                _registered_method=True)
        self.GetAllPositions = channel.unary_stream(
                '/user.PositionService/GetAllPositions',
                request_serializer=common__pb2.Empty.SerializeToString,
                response_deserializer=user__pb2.PositionPublic.FromString,
                _registered_method=True)
        self.ApplyFunding = channel.unary_unary(
                '/user.PositionService/ApplyFunding',
                request_serializer=user__pb2.ApplyFundingRequest.SerializeToString,
                response_deserializer=common__pb2.Empty.FromString,
                _registered_method=True)


class PositionServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetPosition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserPositions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPositionSlow(self, request, context):
        """This calls the DB to get the position instead of the cache
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreatePosition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllPositions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ApplyFunding(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PositionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetPosition': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPosition,
                    request_deserializer=user__pb2.PositionRequest.FromString,
                    response_serializer=user__pb2.PositionPublic.SerializeToString,
            ),
            'GetUserPositions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserPositions,
                    request_deserializer=common__pb2.UserRequest.FromString,
                    response_serializer=user__pb2.PositionsPublic.SerializeToString,
            ),
            'GetPositionSlow': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPositionSlow,
                    request_deserializer=user__pb2.PositionRequest.FromString,
                    response_serializer=user__pb2.PositionPublic.SerializeToString,
            ),
            'CreatePosition': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePosition,
                    request_deserializer=user__pb2.PositionRequest.FromString,
                    response_serializer=user__pb2.PositionPublic.SerializeToString,
            ),
            'GetAllPositions': grpc.unary_stream_rpc_method_handler(
                    servicer.GetAllPositions,
                    request_deserializer=common__pb2.Empty.FromString,
                    response_serializer=user__pb2.PositionPublic.SerializeToString,
            ),
            'ApplyFunding': grpc.unary_unary_rpc_method_handler(
                    servicer.ApplyFunding,
                    request_deserializer=user__pb2.ApplyFundingRequest.FromString,
                    response_serializer=common__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'user.PositionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('user.PositionService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PositionService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetPosition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/user.PositionService/GetPosition',
            user__pb2.PositionRequest.SerializeToString,
            user__pb2.PositionPublic.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserPositions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/user.PositionService/GetUserPositions',
            common__pb2.UserRequest.SerializeToString,
            user__pb2.PositionsPublic.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPositionSlow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/user.PositionService/GetPositionSlow',
            user__pb2.PositionRequest.SerializeToString,
            user__pb2.PositionPublic.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreatePosition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/user.PositionService/CreatePosition',
            user__pb2.PositionRequest.SerializeToString,
            user__pb2.PositionPublic.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllPositions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/user.PositionService/GetAllPositions',
            common__pb2.Empty.SerializeToString,
            user__pb2.PositionPublic.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ApplyFunding(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/user.PositionService/ApplyFunding',
            user__pb2.ApplyFundingRequest.SerializeToString,
            common__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
