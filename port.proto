syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "common.proto";

package port;

service PortService {
    rpc StreamOrders (stream OrdersStreamRequest) returns (stream OrderResponse);

    rpc AddOrder (AddOrderRequest) returns (OrderResponse);
    rpc CancelOrder (CancelOrderRequest) returns (OrderResponse);
    rpc ModifyOrder (ModifyOrderRequest) returns (OrderResponse);
    rpc GetOrder (GetOrderRequest) returns (OrderResponse);
    rpc GetUserOrders (common.ListRequest) returns (AllOrdersResponse);
    rpc GetOrders (common.ListRequest) returns (AllOrdersResponse);
    rpc CancelAllOrders (common.Empty) returns (common.AckResponse);

    rpc GetOrderBook (GetOrderBookRequest) returns (stream OrderBook);
    rpc SubscribeTrades(common.Empty) returns (stream MatchedTrades);
    rpc ReloadUsers(common.Empty) returns (common.AckResponse);

    rpc GetTrades(common.ListRequest) returns (TradesPublic);
    rpc GetUserTrades(common.ListRequest) returns (TradesPublic);

    rpc GetUserPositions(common.Empty) returns (PositionsPublic);
    rpc GetUserBalance(common.Empty) returns (BalancePublic);
}


message GetOrderBookRequest {
    string symbol = 1;
}

message OrderBook {
    string symbol = 1;
    google.protobuf.Timestamp timestamp = 2;
    repeated OrderBookEntry bids = 3;
    repeated OrderBookEntry asks = 4;
    int64 sequence = 5;
}

message OrderBookEntry {
    double price = 1;
    double quantity = 2;
}

message MatchedTrades {
    string symbol = 1;                  // Trading pair, e.g., "BTCUSDT"
    double price = 2;                   // Matched price (agressor's price)
    double quantity = 3;                 // Matched quantity
    common.OrderDirection aggressor_side = 4;  // Aggressor's side
    string maker_order_id = 5;          // Maker's order ID
    string taker_order_id = 6;          // Taker's order ID
}


message AddOrderRequest {
    string symbol = 1;
    common.OrderDirection side = 2;
    common.OrderType type = 3;
    common.OrderTimeInForce time_in_force = 4;
    double quantity = 5;                         // Order quantity
    double price = 6;                  // Order price (optional for MARKET)
    optional string client_order_id = 7;    // Client order ID. Autogenerated if not sent
    optional OrderRespType response_type = 8;   // Response type: ACK, RESULT. Default ACK
    google.protobuf.Timestamp timestamp = 9;    // Unix timestamp in nanoseconds
}

message CancelOrderRequest {
    oneof order_id_choice {
        string order_id = 1;
        string client_order_id = 2;
    }
    string symbol = 3;
}

message ModifyOrderRequest {
    string symbol = 1;           // Trading pair, e.g., "BTCUSDT"
    string order_id = 2;         // Order ID
    double original_quantity = 3;         // Order quantity
    double quantity = 4;         // Order quantity
    double price = 5;            // Order price
    google.protobuf.Timestamp timestamp = 6;        // Unix timestamp in milliseconds
    google.protobuf.Timestamp update_time = 7;        // Unix timestamp in milliseconds
    string client_order_id = 8; // not used apart from rate limited responses
}



message GetOrderRequest {
    string order_id = 1;
    string symbol = 2;
    google.protobuf.Timestamp timestamp = 3;
}


enum OrderRespType {
    ACK = 0;
    RESULT = 1;
}



message OrderResponse {
    string order_id = 1;
    string symbol = 2;
    common.OrderStatus status = 3;
    double quantity = 5;
    double price = 6;
    common.OrderDirection side = 7;
    common.OrderType type = 8;
    common.OrderTimeInForce time_in_force = 9;
    google.protobuf.Timestamp update_time = 10;
    string user_id = 11;
    string client_order_id = 12;
    double quantity_remaining = 13;
}

message AllOrdersResponse {
    repeated OrderResponse orders = 1;
    google.protobuf.Timestamp timestamp = 2;
    int32 count = 3;
}


message TradePublic {
    string trade_id = 1;
    string symbol = 2;
    double price = 3;
    double quantity = 4;
    google.protobuf.Timestamp order_timestamp = 5;

    common.OrderDirection aggressor_side = 6;
    string buy_order_id = 8;
    string sell_order_id = 9;
    string buy_user_id = 10;
    string sell_user_id = 11;
}

message TradesPublic {
    repeated TradePublic trades = 1;
    google.protobuf.Timestamp timestamp = 2;
    int32 count = 3;
}

message PositionPublic {
    string id = 1;
    string symbol = 2;
    string user_id = 3;
    double quantity_buy = 4;
    double quantity_sell = 5;
    double price_buy = 6;
    double price_sell = 7;
    double margin_alloc = 8;
    double realised_pnl = 9;
    google.protobuf.Timestamp timestamp = 10;
}
  
message PositionsPublic {
    repeated PositionPublic data = 1;
    int64 count = 2;
    google.protobuf.Timestamp timestamp = 3;
}

message BalancePublic {
    string id = 1;
    string user_id = 2;
    float deposit = 3;
    float realised_pnl = 4;
    float order_margin = 5;
    float position_margin = 6;
    float unrealised_pnl = 7;
    google.protobuf.Timestamp timestamp = 99;
  }

message OrdersStreamRequest {
    oneof request_type {
        AddOrderRequest add_order = 1;
        CancelOrderRequest cancel_order = 2;
        ModifyOrderRequest modify_order = 3;
    }   
}

message OrdersStreamResponse {
    oneof response_type {
        OrderResponse add_response = 1;
        OrderResponse cancel_response = 2;
        OrderResponse modify_response = 3;
    }
}